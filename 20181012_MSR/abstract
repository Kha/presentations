Lean 4: Reimplementing Lean in Lean

Lean 3, the latest version of the Lean theorem prover, marked a major shift for the project by making Lean a proper, executable language. Powered by a byte-code interpreter, this change allowed users to program their own proof tactics without having to learn a new language. Tactic authors have access to the full proof state as well as efficient primitives implemented in C++ such as a simplifier. Tactics can even specify custom syntax for their parameters by interfacing with the Lean 3 parser written in C++. However, users quickly found that the provided primitives were too limited for some advanced use cases.

In this talk, we give an overview of our work on, and plans for, the next version of Lean, Lean 4. Lean 4 aims to minimize the distance between user code and most Lean system components by reimplementing them in Lean itself. As a first result, we present an extensible parser of the Lean language written in Lean. Not only does this reimplementation make every part of the Lean grammar accessible from custom parsers, it also follows modern parser design by constructing a position-annotated, round-trippable syntax tree, which opens up new opportunities for IDEs and development tools. Finally, we discuss our work on a new native back end for Lean that ensures sufficient performance of the reimplemented, highly monadic code.
